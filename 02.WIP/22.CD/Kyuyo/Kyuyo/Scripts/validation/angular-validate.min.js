(function (angular, $) {
    angular.module('ngValidate', [])

        .directive('ngValidate', function () {
            return {
                require: 'form',
                restrict: 'A',
                scope: {
                    ngValidate: '='
                },
                link: function (scope, element, attrs, form) {

                    $('.group-messages').addClass('alert alert-block alert-danger');

                    scope.$watch('ngValidate', function () {
                        if (angular.isObject(scope.ngValidate)) {

                            scope.ngValidate.errorLabelContainer = $('div.group-messages');
                            var validator = element.validate(scope.ngValidate);
                            form.validate = function (options) {
                                var oldSettings = validator.settings;

                                validator.settings = $.extend(true, {}, validator.settings, options);

                                var valid = validator.form();

                                validator.settings = oldSettings; // Reset to old settings

                                return valid;
                            };

                            form.setValidateOpts = function (opts) {
                                validator.settings.rules = opts.rules;
                                validator.settings.messages = opts.messages;
                            }

                            form.showErrors = function () {
                                return validator.form();
                            };

                            form.errorList = function () {
                                validator.form();
                                var errors = [];
                                angular.forEach(validator.errorList, function (elm) {
                                    errors.push(elm.message);
                                })
                                return errors;
                            }

                            form.numberOfInvalids = function () {
                                return validator.numberOfInvalids();
                            };
                            form.resetForm = function () {
                                validator.resetForm();
                            }
                            form.validateFiled = function (filed) {
                                validator.element(filed);
                            }
                        }

                    })

                }
            };
        })

        .provider('$validator', function () {
            $.validator.setDefaults({
                onsubmit: false,
                onkeyup: false,
                onclick: false,
                ignore: ['disabled'],
                onfocusout: false,
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                },
                invalidHandler: function(form, validator) {
                    var errors = validator.numberOfInvalids();
                    if (errors > 0) {                    
                        validator.errorList[0].element.focus();
                    }
                },
                errorElement: 'div',
                errorPlacement: function(error, element) {}
            });

            return {
                setDefaults: $.validator.setDefaults,
                addMethod: $.validator.addMethod,
                setDefaultMessages: function (messages) {
                    angular.extend($.validator.messages, messages);
                },
                format: $.validator.format,
                $get: function () {
                    return {};
                }
            };
        });
}(angular, jQuery));