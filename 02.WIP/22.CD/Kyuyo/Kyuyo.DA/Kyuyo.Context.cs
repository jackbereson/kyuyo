//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kyuyo.DA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KyuyoEntities : DbContext
    {
        public KyuyoEntities()
            : base("name=KyuyoEntities")
        {
    		this.Configuration.ValidateOnSaveEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<KY_CLOSING_DATE> KY_CLOSING_DATE { get; set; }
        public virtual DbSet<KY_LONGTERM_ABSENCE> KY_LONGTERM_ABSENCE { get; set; }
        public virtual DbSet<KY_OVERTIME_TOTAL> KY_OVERTIME_TOTAL { get; set; }
        public virtual DbSet<KY_SALARY_ARREAR_DISTRIBUTION> KY_SALARY_ARREAR_DISTRIBUTION { get; set; }
        public virtual DbSet<TB_M_COMPANY> TB_M_COMPANY { get; set; }
        public virtual DbSet<TB_M_SYSTEM> TB_M_SYSTEM { get; set; }
        public virtual DbSet<TB_M_DEPARTMENT> TB_M_DEPARTMENT { get; set; }
        public virtual DbSet<KY_ALLOWANCE_MASTER> KY_ALLOWANCE_MASTER { get; set; }
        public virtual DbSet<KY_ALLOWANCE_RESULT> KY_ALLOWANCE_RESULT { get; set; }
        public virtual DbSet<KY_AUTHORITY> KY_AUTHORITY { get; set; }
        public virtual DbSet<KY_POLICY_MASTER> KY_POLICY_MASTER { get; set; }
        public virtual DbSet<KY_DEPENDENT> KY_DEPENDENT { get; set; }
        public virtual DbSet<KY_SALARY_FORMULA_MASTER> KY_SALARY_FORMULA_MASTER { get; set; }
        public virtual DbSet<KY_OTHER_PAY> KY_OTHER_PAY { get; set; }
        public virtual DbSet<TB_M_EMP_DEPT> TB_M_EMP_DEPT { get; set; }
        public virtual DbSet<KY_EMPLOYEE_MASTER> KY_EMPLOYEE_MASTER { get; set; }
        public virtual DbSet<TB_R_WORKING_TIME> TB_R_WORKING_TIME { get; set; }
        public virtual DbSet<TB_R_WORKING_TIME_HIS> TB_R_WORKING_TIME_HIS { get; set; }
        public virtual DbSet<KY_SALARY_RESULT> KY_SALARY_RESULT { get; set; }
        public virtual DbSet<KY_RATE> KY_RATE { get; set; }
        public virtual DbSet<KY_WORKINGTIME_TOTAL> KY_WORKINGTIME_TOTAL { get; set; }
        public virtual DbSet<KY_SALARY_MASTER> KY_SALARY_MASTER { get; set; }
        public virtual DbSet<KY_QUANTITY_PRODUCT> KY_QUANTITY_PRODUCT { get; set; }
    
        public virtual ObjectResult<GetEmployeeAuthority_Result> GetEmployeeAuthority(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeAuthority_Result>("GetEmployeeAuthority", companyIdParameter);
        }
    
        [DbFunction("KyuyoEntities", "STRING_SPLIT")]
        public virtual IQueryable<string> STRING_SPLIT(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[KyuyoEntities].[STRING_SPLIT](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<SearchDependent_Result> SearchDependent(string companyCd, string deptCd, string employeeNo, string employeeName)
        {
            var companyCdParameter = companyCd != null ?
                new ObjectParameter("CompanyCd", companyCd) :
                new ObjectParameter("CompanyCd", typeof(string));
    
            var deptCdParameter = deptCd != null ?
                new ObjectParameter("DeptCd", deptCd) :
                new ObjectParameter("DeptCd", typeof(string));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDependent_Result>("SearchDependent", companyCdParameter, deptCdParameter, employeeNoParameter, employeeNameParameter);
        }
    
        public virtual ObjectResult<SearchEmployee_Result> SearchEmployee(Nullable<int> companyId, string deptCd, string employeeNo, string employeeName, string includeQuitFlag, Nullable<System.DateTime> effectiveDtFrom, Nullable<System.DateTime> effectiveDtTo)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var deptCdParameter = deptCd != null ?
                new ObjectParameter("DeptCd", deptCd) :
                new ObjectParameter("DeptCd", typeof(string));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var includeQuitFlagParameter = includeQuitFlag != null ?
                new ObjectParameter("IncludeQuitFlag", includeQuitFlag) :
                new ObjectParameter("IncludeQuitFlag", typeof(string));
    
            var effectiveDtFromParameter = effectiveDtFrom.HasValue ?
                new ObjectParameter("EffectiveDtFrom", effectiveDtFrom) :
                new ObjectParameter("EffectiveDtFrom", typeof(System.DateTime));
    
            var effectiveDtToParameter = effectiveDtTo.HasValue ?
                new ObjectParameter("EffectiveDtTo", effectiveDtTo) :
                new ObjectParameter("EffectiveDtTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchEmployee_Result>("SearchEmployee", companyIdParameter, deptCdParameter, employeeNoParameter, employeeNameParameter, includeQuitFlagParameter, effectiveDtFromParameter, effectiveDtToParameter);
        }
    
        public virtual ObjectResult<GetAuthorityMenu_Result> GetAuthorityMenu(string employeeNo)
        {
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuthorityMenu_Result>("GetAuthorityMenu", employeeNoParameter);
        }
    
        public virtual ObjectResult<SearchSalaryMaster_Result> SearchSalaryMaster(Nullable<int> companyId, string deptCd, string employeeNo, string employeeName, Nullable<System.DateTime> effectiveDtFrom, Nullable<System.DateTime> effectiveDtTo)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var deptCdParameter = deptCd != null ?
                new ObjectParameter("DeptCd", deptCd) :
                new ObjectParameter("DeptCd", typeof(string));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("EmployeeNo", employeeNo) :
                new ObjectParameter("EmployeeNo", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var effectiveDtFromParameter = effectiveDtFrom.HasValue ?
                new ObjectParameter("EffectiveDtFrom", effectiveDtFrom) :
                new ObjectParameter("EffectiveDtFrom", typeof(System.DateTime));
    
            var effectiveDtToParameter = effectiveDtTo.HasValue ?
                new ObjectParameter("EffectiveDtTo", effectiveDtTo) :
                new ObjectParameter("EffectiveDtTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSalaryMaster_Result>("SearchSalaryMaster", companyIdParameter, deptCdParameter, employeeNoParameter, employeeNameParameter, effectiveDtFromParameter, effectiveDtToParameter);
        }
    
        public virtual ObjectResult<SearchSalaryCalulate_Result> SearchSalaryCalulate(Nullable<int> companyId, Nullable<System.DateTime> startDt, Nullable<System.DateTime> endDt, string yearMonth)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startDtParameter = startDt.HasValue ?
                new ObjectParameter("startDt", startDt) :
                new ObjectParameter("startDt", typeof(System.DateTime));
    
            var endDtParameter = endDt.HasValue ?
                new ObjectParameter("endDt", endDt) :
                new ObjectParameter("endDt", typeof(System.DateTime));
    
            var yearMonthParameter = yearMonth != null ?
                new ObjectParameter("yearMonth", yearMonth) :
                new ObjectParameter("yearMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSalaryCalulate_Result>("SearchSalaryCalulate", companyIdParameter, startDtParameter, endDtParameter, yearMonthParameter);
        }
    }
}
